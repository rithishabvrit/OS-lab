// pipes_process // 
#include<stdio.h>
#include<unistd.h>

int main() {
   int pipefds[2];
   int returnstatus;
   int pid;
   char write_messages[2][20]={"dog", "bow"};
   char read_messages[20];
   returnstatus = pipe(pipefds);
   if (returnstatus == -1) {
      printf("Unable to create pipe\n");
      return 1;
   }
   pid = fork();
   // CHILD PROCESS //
   if (pid == 0) {
      read(pipefds[0], read_messages, sizeof(read_messages));
      printf("Child Process  %s\n", read_messages);
      read(pipefds[0], read_messages, sizeof(read_messages));
      printf("Child Process  %s\n", read_messages);
      }
      else {
      // PARENT PROCESS //
      printf("Parent Process  %s\n",write_messages[0]);
      write(pipefds[1], write_messages[0], sizeof(write_messages[0]));
      printf("Parent Process  %s\n", write_messages[1]);
      write(pipefds[1], write_messages[1], sizeof(write_messages[1]));
   }
   return 0;
}

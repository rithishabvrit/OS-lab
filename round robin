// ROUND ROBIN //
#include <stdio.h>
int main() {
int i,limit,total = 0,x,counter = 0,time_quantum;
int wait_time = 0,tat=0,at[10],bt[10],temp[10];
float awt,atat;
printf("enter total number of processes");
scanf("%d",&limit);
x = limit;
for(i=0;i<limit;i++){
printf("\n enter total number of processor details");
printf("arrival time");
scanf("%d",&at[i]);
printf("Burst time");
scanf("%d",&bt[i]);
temp[i] = bt[i];
}
printf("\n enter quantum time");
scanf("%d",&time_quantum);
printf("\n process\t burst time \t turnaround time\t waiting time\n");
for(total=0;i=0;x!=0){
if(temp[i] <= time_quantum && temp[i]>0) {
total += temp[i];
temp[i] =0;
counter = 1; }
else if(temp[i] > 0) {
temp[i] = temp[i] – time_quantum;
total += time_quantum;
}
if(temp[i] == 0 && counter ==1) {
x--;
printf("\n process [%d]\t %d \t %d\t %d", i+1,bt[i],total – at[i],total –at[i] – bt[i]);
wt = wt+total -at[i] – bt[i];
tat = tat +total-at[i];
counter = 0;
}
if(i== limit -1)
i=0;
else if(at[i+1] <= total)
i++;
else
i=0;
}
awt = wt * 1.0/limit;
atat = tat * 1.0/limit;
printf("\n average waiting time :%f",awt);
printf("\n average turn around time :%f",atat);
return 0;
}
